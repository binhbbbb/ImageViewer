<?xml version="1.0" encoding="UTF-8"?>

<project name="Calendar" basedir="../" default="all" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Main target that does all -->
	<target name="all" depends="clean-all, compile, widgetset, package-jar, package-zip, demo.war, cleanup" />

	<!-- Non-project specific settings. -->
	<property file="build/build.properties" />
	<property name="configure.libs" value="" />

	<!-- ================================================================== -->
	<!-- Initialization                                                     -->
	<!-- ================================================================== -->

	<!-- Clean old compilation results. -->
	<target name="clean-all">
		<delete dir="${result-path}" includes="**/*" followsymlinks="false" includeemptydirs="true" defaultexcludes="false" failonerror="false" />
	</target>

	<!-- Initialization -->
	<target name="init">
		<ivy:cachepath pathid="ivy.deps" conf="widgetset-compile" />
		<property name="base-name" value="${addon.name}-${version}" />
		<property name="jar.name" value="${base-name}.jar" />
		<property name="jar.path" value="${result-path}/${jar.name}" />
		<ivy:retrieve pattern="${temp.lib.dir}/[artifact]-[type]-[revision].[ext]" conf="default" />
	</target>

	<!-- ================================================================== -->
	<!-- Compilation                                                        -->
	<!-- ================================================================== -->

	<!-- Compile server-side Java -->
	<target name="compile" depends="init">
		<echo>Compiling server side...</echo>
		<property name="result.classes" value="${result-path}/war/WEB-INF/classes" />
		<mkdir dir="${result.classes}" />
		<javac destdir="${result.classes}" target="1.5" source="1.5">
			<src path="src/${src.package.dir}" />
			<src path="${demo.src.base}" />
			<include name="**/*.*" />
			<classpath refid="ivy.deps" />
			<classpath>
				<fileset dir="${dependency.gwt-image-loader.dir}">
					<include name="${dependency.gwt-image-loader}" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- Compile client-side Java -->
	<target name="widgetset" depends="init">
		<echo>Compiling widgetset...</echo>
		<java classname="com.google.gwt.dev.Compiler" failonerror="yes" fork="yes" maxmemory="1024m">
			<arg value="-war" />
			<arg value="${webcontent.dir}/${webcontent.widgetset.dir}" />
			<arg value="${addon.widgetset}" />
			<arg value="-logLevel" />
			<arg value="INFO" />
			<jvmarg value="-Xss1024k" />
			<jvmarg value="-Xmx1024M" />
			<jvmarg value="-Djava.awt.headless=true" />
			<classpath refid="ivy.deps" />
			<classpath>
				<path path="src" />
				<path path="${basedir}/${result-path}/war/WEB-INF/classes" />
				<fileset dir="${dependency.gwt-image-loader.dir}">
					<include name="${dependency.gwt-image-loader}" />
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- ================================================================== -->
	<!-- Packaging                                                          -->
	<!-- ================================================================== -->

	<!-- Create the JAR package [Note: JAR is not functional by itself]. -->
	<target name="package-jar" depends="compile" unless="run.no-package-jar">
		<echo>Creating ${addon.title} JAR...</echo>
		<jar jarfile="${jar.path}" compress="true">
			<manifest>
				<attribute name="Vaadin-Package-Version" value="1" />
				<attribute name="Vaadin-Widgetsets" value="${addon.widgetset}" />
				<attribute name="Implementation-Title" value="${addon.title}" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="${addon.vendor}" />
			</manifest>
			<!-- The built server-side classes and the widget set class are here. -->
			<fileset dir="${result.classes}">
				<patternset>
					<include name="${src.package.dir}/**/*" />
					<exclude name="**/demo/**" />
				</patternset>
			</fileset>
			<!-- Include sources. -->
			<fileset dir="src">
				<patternset>
					<include name="${src.package.dir}/**/*" />
					<exclude name="**/demo/**" />
				</patternset>
			</fileset>
		</jar>
	</target>

	<!-- Create the ZIP distribution package. -->
	<target name="package-zip" depends="package-jar">
		<echo>Creating ${addon.title} ZIP...</echo>
		<property name="zip.name" value="${result-path}/${addon.name}-${version}.zip" />
		<!-- Make the zip manifest -->
		<mkdir dir="${result-path}/META-INF" />
		<echo file="${result-path}/META-INF/MANIFEST.MF">Vaadin-Addon: ${addon.name}-${version}/${jar.name}
Vaadin-Package-Version: 1
Implementation-Title: ${addon.title}
Implementation-Version: ${version}
Implementation-Vendor: ${addon.vendor}
Vaadin-Dependency: ${dependency.gwt-image-loader}
       </echo>
		<zip destfile="${zip.name}">
			<zipfileset dir="${result-path}" includes="META-INF/MANIFEST.MF" />
			<!-- The add-on library itself -->
			<zipfileset prefix="${addon.name}-${version}" file="${result-path}/${jar.name}" />
			<!-- Dependency: GWT Image Loader -->
			<zipfileset prefix="" file="${dependency.gwt-image-loader.dir}/${dependency.gwt-image-loader}" />
			<!-- Readme file -->
			<zipfileset prefix="${documentation.dir}" dir="${documentation.dir}">
				<patternset>
					<include name="*" />
				</patternset>
			</zipfileset>
		</zip>
	</target>

	<!-- Create demo application WAR -->
	<target name="demo.war" depends="package-jar">
		<echo>Creating ${addon.title} Demo Application WAR...</echo>
		<property name="war.path" value="${result-path}/${addon.name}-v7.war" />
		<war destfile="${war.path}" webxml="${web.xml.location}">
			<classes dir="${result.classes}" />
			<lib dir="${dependency.gwt-image-loader.dir}" excludes="*src*" />
			<lib file="${jar.path}" />
			<lib dir="${temp.lib.dir}"/>
			<fileset dir="${webcontent.dir}">
				<patternset>
					<include name="${webcontent.widgetset.dir}${addon.widgetset}/**/*" />
					<include name="${webcontent.theme.dir}**/*" />
				</patternset>
			</fileset>
		</war>
	</target>

	<target name="cleanup">
		<delete dir="${temp.lib.dir}" followsymlinks="false" includeemptydirs="true" defaultexcludes="false" failonerror="false" />
	</target>
</project>